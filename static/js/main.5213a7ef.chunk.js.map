{"version":3,"sources":["features/currencies/currenciesSlice.js","features/tracker/trackerSlice.js","features/currencies/Currency.js","features/currencies/CurrencyList.js","features/tracker/TrackedCurrency.js","features/tracker/TrackedCurrencies.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["getCurrenciesList","createAsyncThunk","a","axios","get","catch","err","console","error","data","status","currenciesSlice","createSlice","name","initialState","loading","tracked","reducers","extraReducers","pending","state","fulfilled","payload","rejected","selectCurrencies","currencies","getCurrencyMeta","getTrackedCurrencyQuotes","args","getState","Object","keys","tracker","join","then","resp","debouncedAction","debounce","action","dispatch","trackerSlice","quotes","add","forEach","id","index","metaIndex","remove","entries","quote","getTrackedCurrencies","getQuotes","Currency","currency","disabled","useDispatch","listItemClasses","hasOwnProperty","push","buttonClasses","className","title","onClick","type","aria-label","icon","faPlusCircle","symbol","CurrencyList","useSelector","trackedCurrencies","listItems","map","length","TrackedCurrency","faMinusCircle","cmc_rank","rank","price","toFixed","TrackedCurrencies","metaData","rows","sort","aData","bData","useEffect","App","currenciesList","slice","item","mainView","Dropdown","Toggle","variant","Menu","Header","role","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5213a7ef.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const getCurrenciesList = createAsyncThunk(\n\t'currencies/getList',\n\tasync () => {\n\t\tconst { data, status } = await axios\n\t\t\t.get('https://www.stackadapt.com/coinmarketcap/map?sort=cmc_rank')\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'Error while fetching available currencies' + err\n\t\t\t\t);\n\t\t\t});\n\t\treturn { data, status };\n\t}\n);\n\nexport const currenciesSlice = createSlice({\n\tname: 'currencies',\n\tinitialState: {\n\t\tloading: 'idle',\n\t\tdata: [],\n\t\ttracked: {},\n\t\tstatus: null,\n\t},\n\treducers: {},\n\textraReducers: {\n\t\t[getCurrenciesList.pending]: (state) => {\n\t\t\tstate.loading = 'pending';\n\t\t},\n\t\t[getCurrenciesList.fulfilled]: (state, { payload }) => {\n\t\t\t// Grab the raw data\n\t\t\tstate.data = [...payload.data.data];\n\n\t\t\t// Store the status in case we need it\n\t\t\tstate.status = payload.data.status;\n\n\t\t\t// Update loading\n\t\t\tstate.loading = 'idle';\n\t\t},\n\t\t[getCurrenciesList.rejected]: (state) => {\n\t\t\tstate.status = 'failed';\n\t\t},\n\t},\n});\n\nexport const selectCurrencies = (state) => state.currencies;\nexport const getCurrencyMeta = (state) => state.currencies.data;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { debounce } from 'lodash';\n\nexport const getTrackedCurrencyQuotes = createAsyncThunk(\n\t'tracker/updateQuotes',\n\tasync (args, { getState }) => {\n\t\tconst state = getState();\n\t\tconst { data, status } = await axios\n\t\t\t.get(\n\t\t\t\t`https://www.stackadapt.com/coinmarketcap/quotes?id=${Object.keys(\n\t\t\t\t\tstate.tracker.tracked\n\t\t\t\t).join(',')}`\n\t\t\t)\n\t\t\t.then((resp) => {\n\t\t\t\treturn resp;\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error('Error while fetching available currencies');\n\t\t\t});\n\t\treturn { data, status };\n\t}\n);\n\n// I think it may be useful to be able to debounce other actions\n// I might move this to a more generic place like the global level of the store\n// I'd need to do more research\nexport const debouncedAction = createAsyncThunk(\n\t'debouncedAction',\n\tdebounce(async (action, { dispatch }) => {\n\t\tdispatch(action);\n\t}, 500)\n);\n\nexport const trackerSlice = createSlice({\n\tname: 'tracker',\n\tinitialState: {\n\t\tloading: 'idle',\n\t\ttracked: {},\n\t\tquotes: {},\n\t\tstatus: null,\n\t},\n\treducers: {\n\t\tadd: (state, { currencies }) => {\n\t\t\tcurrencies.forEach(({ id, index }) => {\n\t\t\t\tstate.tracked[id] = {\n\t\t\t\t\tmetaIndex: index,\n\t\t\t\t\tquotes: [],\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t\tremove: (state, { currencies }) => {\n\t\t\tcurrencies.forEach(({ id, index }) => {\n\t\t\t\tdelete state.tracked[id];\n\t\t\t\tdelete state.quotes[id];\n\t\t\t});\n\t\t},\n\t},\n\textraReducers: {\n\t\t[getTrackedCurrencyQuotes.pending]: (state) => {\n\t\t\tstate.loading = 'pending';\n\t\t},\n\t\t[getTrackedCurrencyQuotes.fulfilled]: (state, { payload }) => {\n\t\t\t// Update the tracked quotes\n\t\t\tObject.entries(payload.data.data).forEach(([id, quote]) => {\n\t\t\t\tstate.quotes[id] = quote;\n\t\t\t});\n\n\t\t\t// Store the status in case we need it\n\t\t\tstate.status = payload.data.status;\n\n\t\t\t// Update loading\n\t\t\tstate.loading = 'idle';\n\t\t},\n\t\t[getTrackedCurrencyQuotes.rejected]: (state) => {\n\t\t\tstate.status = 'failed';\n\t\t},\n\t},\n});\n\nexport const getTrackedCurrencies = (state) => state.tracker.tracked;\nexport const getQuotes = (state) => state.tracker.quotes;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\n\nexport function Currency({ currency, disabled, index, tracked }) {\n\tconst dispatch = useDispatch();\n\n\tconst handleClick = () => {\n\t\tdispatch({\n\t\t\ttype: 'tracker/add',\n\t\t\tcurrencies: [\n\t\t\t\t{\n\t\t\t\t\tid: currency.id,\n\t\t\t\t\tindex,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t};\n\n\tconst listItemClasses = [];\n\tif (tracked.hasOwnProperty(currency.id)) listItemClasses.push('d-none');\n\n\tconst buttonClasses = ['tracker-button'];\n\tif (disabled) {\n\t\tbuttonClasses.push('disabled');\n\t\tbuttonClasses.push('text-muted');\n\t} else {\n\t\tbuttonClasses.push('text-success');\n\t}\n\n\treturn (\n\t\t<li className={listItemClasses.join(' ')}>\n\t\t\t<button\n\t\t\t\ttitle={`Add ${currency.name} to tracking list`}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tclassName={buttonClasses.join(' ')}\n\t\t\t\tonClick={handleClick}\n\t\t\t\taria-label={`Track ${currency.name}`}\n\t\t\t>\n\t\t\t\t<FontAwesomeIcon icon={faPlusCircle} />\n\t\t\t</button>\n\t\t\t{currency.name} ({currency.symbol})\n\t\t</li>\n\t);\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getTrackedCurrencies } from '../tracker/trackerSlice';\nimport { selectCurrencies } from './currenciesSlice';\nimport { Currency } from './Currency';\n\nexport function CurrencyList() {\n\tconst currencies = useSelector(selectCurrencies);\n\tconst trackedCurrencies = useSelector(getTrackedCurrencies);\n\n\tconst listItems = currencies.data.map((currency, index) => (\n\t\t<Currency\n\t\t\tkey={`untracked-currency-${currency.id}`}\n\t\t\tcurrency={currency}\n\t\t\tindex={index}\n\t\t\ttracked={trackedCurrencies}\n\t\t\tdisabled={Object.entries(trackedCurrencies).length > 9}\n\t\t/>\n\t));\n\n\treturn (\n\t\t<ul>\n\t\t\t{Object.keys(trackedCurrencies).length > 9 ? (\n\t\t\t\t<div className='text-danger mb-2'>\n\t\t\t\t\tYou can't track more than 10 currencies at a time.\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t\t{listItems}\n\t\t</ul>\n\t);\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getQuotes } from './trackerSlice';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\n\nexport function TrackedCurrency({ currency, index, disabled }) {\n\tconst dispatch = useDispatch();\n\tconst quotes = useSelector(getQuotes);\n\n\tconst handleClick = () => {\n\t\tdispatch({\n\t\t\ttype: 'tracker/remove',\n\t\t\tcurrencies: [\n\t\t\t\t{\n\t\t\t\t\tid: currency.id,\n\t\t\t\t\tindex,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t};\n\n\tconst buttonClasses = ['tracker-button'];\n\tif (disabled) {\n\t\tbuttonClasses.push('disabled');\n\t\tbuttonClasses.push('text-muted');\n\t} else {\n\t\tbuttonClasses.push('text-danger');\n\t}\n\n\treturn (\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<button\n\t\t\t\t\ttitle={`Remove ${currency.name} from tracking list`}\n\t\t\t\t\tclassName={buttonClasses.join(' ')}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t>\n\t\t\t\t\t<FontAwesomeIcon icon={faMinusCircle} />\n\t\t\t\t</button>\n\t\t\t</td>\n\t\t\t<td>{currency.name}</td>\n\t\t\t<td>{currency.symbol}</td>\n\t\t\t<td>{currency.cmc_rank ?? currency.rank ?? 'Loading...'}</td>\n\t\t\t<td>\n\t\t\t\t{quotes[currency.id] && quotes[currency.id].quote['USD']\n\t\t\t\t\t? `$${quotes[currency.id].quote['USD'].price.toFixed(\n\t\t\t\t\t\t\t2\n\t\t\t\t\t  )} (USD)`\n\t\t\t\t\t: 'Loading...'}\n\t\t\t</td>\n\t\t</tr>\n\t);\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrencyMeta } from '../currencies/currenciesSlice';\nimport {\n\tdebouncedAction,\n\tgetTrackedCurrencies,\n\tgetTrackedCurrencyQuotes,\n} from './trackerSlice';\nimport { TrackedCurrency } from './TrackedCurrency';\n\nexport function TrackedCurrencies() {\n\tconst dispatch = useDispatch();\n\tconst metaData = useSelector(getCurrencyMeta);\n\tconst trackedCurrencies = useSelector(getTrackedCurrencies);\n\tconst rows = Object.entries(trackedCurrencies)\n\t\t.sort(\n\t\t\t([aId, aData], [bId, bData]) =>\n\t\t\t\tmetaData[aData.metaIndex].rank - metaData[bData.metaIndex].rank\n\t\t)\n\t\t.map(([id, { metaIndex }]) => (\n\t\t\t<TrackedCurrency\n\t\t\t\tkey={`tracked-currency-${metaData[metaIndex].id}`}\n\t\t\t\tcurrency={metaData[metaIndex]}\n\t\t\t\tindex={metaIndex}\n\t\t\t\tdisabled={Object.keys(trackedCurrencies).length < 2}\n\t\t\t/>\n\t\t));\n\n\tuseEffect(() => {\n\t\tif (Object.keys(trackedCurrencies).length > 0) {\n\t\t\t// We use the debounce action to make sure we don't spam the server\n\t\t\tdispatch(debouncedAction(getTrackedCurrencyQuotes()));\n\t\t}\n\t}, [dispatch, trackedCurrencies]);\n\n\treturn (\n\t\t<div className='tracker-table-container'>\n\t\t\t<table className='tracker-table table table-striped table-borderless'>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t<th>Symbol</th>\n\t\t\t\t\t\t<th>CMC Rank</th>\n\t\t\t\t\t\t<th>Price (USD)</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>{rows}</tbody>\n\t\t\t</table>\n\t\t\t{Object.keys(trackedCurrencies).length < 2 ? (\n\t\t\t\t<div className='text-danger mb-2'>\n\t\t\t\t\tYou can't track less than one currency at a time.\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</div>\n\t);\n}\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './App.scss';\r\nimport {\r\n\tgetCurrenciesList,\r\n\tselectCurrencies,\r\n} from './features/currencies/currenciesSlice';\r\nimport { CurrencyList } from './features/currencies/CurrencyList';\r\nimport { TrackedCurrencies } from './features/tracker/TrackedCurrencies';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nfunction App() {\r\n\tconst dispatch = useDispatch();\r\n\tconst currencies = useSelector(selectCurrencies);\r\n\tconst currenciesList = currencies.data;\r\n\r\n\tuseEffect(() => {\r\n\t\t// If we have no status, it means we haven't fetched data yet. We'll fetch the data.\r\n\t\t// This avoids a component update loop of constantly fetching data.\r\n\t\t// Later we will use this to also update the list from time to time by checking last update time\r\n\r\n\t\tif (currenciesList.length === 0) {\r\n\t\t\tdispatch(getCurrenciesList());\r\n\t\t}\r\n\t}, [dispatch, currenciesList]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (currencies.data.length > 0) {\r\n\t\t\t// If there are currencies, we update the tracker list once\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'tracker/add',\r\n\t\t\t\tcurrencies: currencies.data.slice(0, 5).map((item, index) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: item.id,\r\n\t\t\t\t\t\tindex,\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\t});\r\n\t\t}\r\n\t}, [dispatch, currencies]);\r\n\r\n\tconst tryAgainClick = () => {\r\n\t\tdispatch(getCurrenciesList());\r\n\t};\r\n\r\n\tconst mainView =\r\n\t\tcurrencies.status !== 'failed' ? (\r\n\t\t\t<div className='row'>\r\n\t\t\t\t<div className='col-12 col-md-8 col-lg-7'>\r\n\t\t\t\t\t<div className='d-flex justify-content-end my-2'>\r\n\t\t\t\t\t\t<Dropdown className='currencies-dropdown'>\r\n\t\t\t\t\t\t\t<Dropdown.Toggle\r\n\t\t\t\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\t\t\t\tid='currencyListDropdown'\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tAdd currencies\r\n\t\t\t\t\t\t\t</Dropdown.Toggle>\r\n\t\t\t\t\t\t\t<Dropdown.Menu>\r\n\t\t\t\t\t\t\t\t<Dropdown.Header>\r\n\t\t\t\t\t\t\t\t\tAvailable currencies\r\n\t\t\t\t\t\t\t\t</Dropdown.Header>\r\n\t\t\t\t\t\t\t\t<CurrencyList />\r\n\t\t\t\t\t\t\t</Dropdown.Menu>\r\n\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<TrackedCurrencies />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : (\r\n\t\t\t<div className='row'>\r\n\t\t\t\t<div className='col'>\r\n\t\t\t\t\t<div className='alert alert-danger' role='alert'>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tUh oh. Something went wrong when fetching the list\r\n\t\t\t\t\t\t\tof trackable currencies.\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>You can try again now or come back later.</p>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName='btn btn-primary mt-2'\r\n\t\t\t\t\t\t\tonClick={tryAgainClick}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tTry again\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\treturn (\r\n\t\t<div className='App'>\r\n\t\t\t<div className='container'>\r\n\t\t\t\t<h1>Cryptocurrency tracker</h1>\r\n\t\t\t\t{mainView}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { currenciesSlice } from '../features/currencies/currenciesSlice';\r\nimport { trackerSlice } from '../features/tracker/trackerSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        currencies: currenciesSlice.reducer,\r\n        tracker: trackerSlice.reducer,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}