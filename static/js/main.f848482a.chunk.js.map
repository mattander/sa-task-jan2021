{"version":3,"sources":["features/currencies/currenciesSlice.js","features/tracker/trackerSlice.js","features/currencies/Currency.js","features/currencies/CurrencyList.js","features/tracker/TrackedCurrency.js","features/tracker/TrackedCurrencies.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["getCurrenciesList","createAsyncThunk","a","axios","get","catch","err","console","error","data","status","currenciesSlice","createSlice","name","initialState","loading","reducers","extraReducers","pending","state","fulfilled","payload","rejected","selectCurrencies","currencies","getTrackedCurrencyQuotes","args","getState","log","Object","keys","tracker","tracked","join","then","resp","debouncedAction","debounce","action","dispatch","trackerSlice","sort","type","asc","add","forEach","currency","id","remove","changeSort","entries","quote","getTrackedCurrencies","values","b","symbol","USD","price","rank","getSort","Currency","disabled","index","useDispatch","listItemClasses","filter","length","push","buttonClasses","className","title","onClick","aria-label","icon","faPlusCircle","CurrencyList","useSelector","trackedCurrencies","listItems","map","TrackedCurrency","useEffect","faMinusCircle","cmc_rank","toFixed","TrackedCurrencies","currentSort","rows","handleHeaderClick","e","target","innerText","trim","size","faArrowDown","faArrowUp","App","currenciesList","slice","mainView","Dropdown","Toggle","variant","Menu","Header","role","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f848482a.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const getCurrenciesList = createAsyncThunk(\n    'currencies/getList',\n    async () => {\n        const { data, status } = await axios\n            .get('https://www.stackadapt.com/coinmarketcap/map?sort=cmc_rank')\n            .catch((err) => {\n                console.error(\n                    'Error while fetching available currencies' + err\n                );\n            });\n        return { data, status };\n    }\n);\n\nexport const currenciesSlice = createSlice({\n    name: 'currencies',\n    initialState: {\n        loading: 'idle',\n        data: [],\n        status: null,\n    },\n    reducers: {},\n    extraReducers: {\n        [getCurrenciesList.pending]: (state) => {\n            state.loading = 'pending';\n        },\n        [getCurrenciesList.fulfilled]: (state, { payload }) => {\n            // Grab the raw data\n            state.data = [...payload.data.data];\n\n            // Store the status in case we need it\n            state.status = payload.data.status;\n\n            // Update loading\n            state.loading = 'idle';\n        },\n        [getCurrenciesList.rejected]: (state) => {\n            state.status = 'failed';\n        },\n    },\n});\n\nexport const selectCurrencies = (state) => state.currencies;\nexport const getCurrencyMeta = (state) => state.currencies.data;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { debounce } from 'lodash';\n\nexport const getTrackedCurrencyQuotes = createAsyncThunk(\n    'tracker/updateQuotes',\n    async (args, { getState }) => {\n        console.log('quotes xhr');\n        const state = getState();\n        const { data, status } = await axios\n            .get(\n                `https://www.stackadapt.com/coinmarketcap/quotes?id=${Object.keys(\n                    state.tracker.tracked\n                ).join(',')}`\n            )\n            .then((resp) => {\n                return resp;\n            })\n            .catch((err) => {\n                console.error('Error while fetching available currencies');\n            });\n        return { data, status };\n    }\n);\n\n// I think it may be useful to be able to debounce other actions\n// I might move this to a more generic place like the global level of the store\n// I'd need to do more research on this\nexport const debouncedAction = createAsyncThunk(\n    'debouncedAction',\n    debounce(async (action, { dispatch }) => {\n        dispatch(action);\n    }, 500)\n);\n\nexport const trackerSlice = createSlice({\n    name: 'tracker',\n    initialState: {\n        loading: 'idle',\n        tracked: {},\n        status: null,\n        sort: {\n            type: 'CMC Rank',\n            asc: true,\n        },\n    },\n    reducers: {\n        add: (state, { currencies }) => {\n            currencies.forEach((currency) => {\n                state.tracked[currency.id] = currency;\n            });\n        },\n        remove: (state, { currencies }) => {\n            currencies.forEach(({ id }) => {\n                delete state.tracked[id];\n            });\n        },\n        changeSort: (state, { sort }) => {\n            state.sort = sort;\n        },\n    },\n    extraReducers: {\n        [getTrackedCurrencyQuotes.pending]: (state) => {\n            state.loading = 'pending';\n        },\n        [getTrackedCurrencyQuotes.fulfilled]: (state, { payload }) => {\n            // Update the tracked quotes\n            Object.entries(payload.data.data).forEach(([id, { quote }]) => {\n                state.tracked[id].quote = quote;\n            });\n\n            // Store the status in case we need it\n            state.status = payload.data.status;\n\n            // Update loading\n            state.loading = 'idle';\n        },\n        [getTrackedCurrencyQuotes.rejected]: (state) => {\n            state.status = 'failed';\n        },\n    },\n});\n\nexport const getTrackedCurrencies = (state) => {\n    return Object.values(state.tracker.tracked).sort((a, b) => {\n        switch (state.tracker.sort.type) {\n            case 'Name': {\n                if (a.name < b.name) {\n                    return state.tracker.sort.asc ? -1 : 1;\n                }\n                if (a.name > b.name) {\n                    return state.tracker.sort.asc ? 1 : -1;\n                }\n\n                return 0;\n            }\n            case 'Symbol': {\n                if (a.symbol < b.symbol) {\n                    return state.tracker.sort.asc ? -1 : 1;\n                }\n                if (a.symbol > b.symbol) {\n                    return state.tracker.sort.asc ? 1 : -1;\n                }\n\n                return 0;\n            }\n            case 'Price (USD)': {\n                return state.tracker.sort.asc\n                    ? a.quote.USD.price - b.quote.USD.price\n                    : b.quote.USD.price - a.quote.USD.price;\n            }\n            default: {\n                // Rank\n                return state.tracker.sort.asc\n                    ? a.rank - b.rank\n                    : b.rank - a.rank;\n            }\n        }\n    });\n};\nexport const getSort = (state) => state.tracker.sort;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\n\nexport function Currency({ currency, disabled, index, tracked }) {\n    const dispatch = useDispatch();\n\n    const handleClick = () => {\n        dispatch({\n            type: 'tracker/add',\n            currencies: [currency],\n        });\n    };\n\n    const listItemClasses = [];\n\n    if (tracked.filter(({ id }) => currency.id === id).length !== 0)\n        listItemClasses.push('d-none');\n\n    const buttonClasses = ['tracker-button'];\n    if (disabled) {\n        buttonClasses.push('disabled');\n        buttonClasses.push('text-muted');\n    } else {\n        buttonClasses.push('text-success');\n    }\n\n    return (\n        <li className={listItemClasses.join(' ')}>\n            <button\n                title={`Add ${currency.name} to tracking list`}\n                disabled={disabled}\n                className={buttonClasses.join(' ')}\n                onClick={handleClick}\n                aria-label={`Track ${currency.name}`}\n            >\n                <FontAwesomeIcon icon={faPlusCircle} />\n            </button>\n            {currency.name} ({currency.symbol})\n        </li>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getTrackedCurrencies } from '../tracker/trackerSlice';\nimport { selectCurrencies } from './currenciesSlice';\nimport { Currency } from './Currency';\n\nexport function CurrencyList() {\n    const currencies = useSelector(selectCurrencies);\n    const trackedCurrencies = useSelector(getTrackedCurrencies);\n\n    const listItems = currencies.data.map((currency, index) => (\n        <Currency\n            key={`untracked-currency-${currency.id}`}\n            currency={currency}\n            index={index}\n            tracked={trackedCurrencies}\n            disabled={Object.entries(trackedCurrencies).length > 9}\n        />\n    ));\n\n    return (\n        <ul>\n            {Object.keys(trackedCurrencies).length > 9 ? (\n                <div className=\"text-danger mb-2\">\n                    You can't track more than 10 currencies at a time.\n                </div>\n            ) : null}\n            {listItems}\n        </ul>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { debouncedAction, getTrackedCurrencyQuotes } from './trackerSlice';\n\nexport function TrackedCurrency({ currency, disabled }) {\n    const dispatch = useDispatch();\n\n    const handleClick = () => {\n        dispatch({\n            type: 'tracker/remove',\n            currencies: [\n                {\n                    id: currency.id,\n                },\n            ],\n        });\n    };\n\n    useEffect(() => {\n        // We use the debounce action to make sure we don't spam the server\n        dispatch(debouncedAction(getTrackedCurrencyQuotes()));\n    }, [dispatch]);\n\n    const buttonClasses = ['tracker-button'];\n    if (disabled) {\n        buttonClasses.push('disabled');\n        buttonClasses.push('text-muted');\n    } else {\n        buttonClasses.push('text-danger');\n    }\n\n    return (\n        <tr>\n            <td>\n                <button\n                    title={`Remove ${currency.name} from tracking list`}\n                    className={buttonClasses.join(' ')}\n                    disabled={disabled}\n                    onClick={handleClick}\n                >\n                    <FontAwesomeIcon icon={faMinusCircle} />\n                </button>\n            </td>\n            <td>{currency.name}</td>\n            <td>{currency.symbol}</td>\n            <td>{currency.cmc_rank ?? currency.rank ?? 'Loading...'}</td>\n            <td>\n                {currency.quote && currency.quote.USD\n                    ? `$${currency.quote.USD.price.toFixed(2)} (USD)`\n                    : 'Loading...'}\n            </td>\n        </tr>\n    );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getSort, getTrackedCurrencies } from './trackerSlice';\nimport { TrackedCurrency } from './TrackedCurrency';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\n\nexport function TrackedCurrencies() {\n    const dispatch = useDispatch();\n    const trackedCurrencies = useSelector(getTrackedCurrencies);\n    const currentSort = useSelector(getSort);\n\n    const rows = Object.entries(trackedCurrencies).map(([id, currency]) => (\n        <TrackedCurrency\n            key={`tracked-currency-${currency.id}`}\n            currency={currency}\n            disabled={Object.keys(trackedCurrencies).length < 2}\n        />\n    ));\n\n    const handleHeaderClick = (e) => {\n        if (e.target.innerText.trim() === currentSort.type) {\n            dispatch({\n                type: 'tracker/changeSort',\n                sort: {\n                    type: currentSort.type.trim(),\n                    asc: !currentSort.asc,\n                },\n            });\n        } else {\n            dispatch({\n                type: 'tracker/changeSort',\n                sort: {\n                    type: e.target.innerText.trim(),\n                    asc: true,\n                },\n            });\n        }\n    };\n\n    return (\n        <div className=\"tracker-table-container\">\n            <div>Click a heading to sort</div>\n            <table className=\"tracker-table table table-striped table-borderless\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th\n                            className=\"sortable-heading\"\n                            onClick={handleHeaderClick}\n                        >\n                            Name\n                            {currentSort.type === 'Name' ? (\n                                <FontAwesomeIcon\n                                    size=\"xs\"\n                                    className=\"ml-2\"\n                                    icon={\n                                        currentSort.asc\n                                            ? faArrowDown\n                                            : faArrowUp\n                                    }\n                                />\n                            ) : null}\n                        </th>\n                        <th\n                            className=\"sortable-heading\"\n                            onClick={handleHeaderClick}\n                        >\n                            Symbol\n                            {currentSort.type === 'Symbol' ? (\n                                <FontAwesomeIcon\n                                    size=\"xs\"\n                                    className=\"ml-2\"\n                                    icon={\n                                        currentSort.asc\n                                            ? faArrowDown\n                                            : faArrowUp\n                                    }\n                                />\n                            ) : null}\n                        </th>\n                        <th\n                            className=\"sortable-heading\"\n                            onClick={handleHeaderClick}\n                        >\n                            CMC Rank\n                            {currentSort.type === 'CMC Rank' ? (\n                                <FontAwesomeIcon\n                                    size=\"xs\"\n                                    className=\"ml-2\"\n                                    icon={\n                                        currentSort.asc\n                                            ? faArrowDown\n                                            : faArrowUp\n                                    }\n                                />\n                            ) : null}\n                        </th>\n                        <th\n                            className=\"sortable-heading\"\n                            onClick={handleHeaderClick}\n                        >\n                            Price (USD){' '}\n                            {currentSort.type === 'Price (USD)' ? (\n                                <FontAwesomeIcon\n                                    size=\"xs\"\n                                    className=\"ml-2\"\n                                    icon={\n                                        currentSort.asc\n                                            ? faArrowDown\n                                            : faArrowUp\n                                    }\n                                />\n                            ) : null}\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>{rows}</tbody>\n            </table>\n            {Object.keys(trackedCurrencies).length < 2 ? (\n                <div className=\"text-danger mb-2\">\n                    You can't track less than one currency at a time.\n                </div>\n            ) : null}\n        </div>\n    );\n}\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './App.scss';\r\nimport {\r\n    getCurrenciesList,\r\n    selectCurrencies,\r\n} from './features/currencies/currenciesSlice';\r\nimport { CurrencyList } from './features/currencies/CurrencyList';\r\nimport { TrackedCurrencies } from './features/tracker/TrackedCurrencies';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const currencies = useSelector(selectCurrencies);\r\n    const currenciesList = currencies.data;\r\n\r\n    useEffect(() => {\r\n        // If we have no status, it means we haven't fetched data yet. We'll fetch the data.\r\n        // This avoids a component update loop of constantly fetching data.\r\n        // Later we will use this to also update the list from time to time by checking last update time\r\n\r\n        if (currenciesList.length === 0) {\r\n            dispatch(getCurrenciesList());\r\n        }\r\n    }, [dispatch, currenciesList]);\r\n\r\n    useEffect(() => {\r\n        if (currencies.data.length > 0) {\r\n            // If there are currencies, we update the tracker list once\r\n            dispatch({\r\n                type: 'tracker/add',\r\n                currencies: currencies.data.slice(0, 5),\r\n            });\r\n        }\r\n    }, [dispatch, currencies]);\r\n\r\n    const tryAgainClick = () => {\r\n        dispatch(getCurrenciesList());\r\n    };\r\n\r\n    const mainView =\r\n        currencies.status !== 'failed' ? (\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-8 col-lg-7\">\r\n                    <div className=\"d-flex justify-content-end my-2\">\r\n                        <Dropdown className=\"currencies-dropdown\">\r\n                            <Dropdown.Toggle\r\n                                variant=\"primary\"\r\n                                id=\"currencyListDropdown\"\r\n                            >\r\n                                Add currencies\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Header>\r\n                                    Available currencies\r\n                                </Dropdown.Header>\r\n                                <CurrencyList />\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </div>\r\n                    <TrackedCurrencies />\r\n                </div>\r\n            </div>\r\n        ) : (\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        <p>\r\n                            Uh oh. Something went wrong when fetching the list\r\n                            of trackable currencies.\r\n                        </p>\r\n                        <p>You can try again now or come back later.</p>\r\n                        <button\r\n                            className=\"btn btn-primary mt-2\"\r\n                            onClick={tryAgainClick}\r\n                        >\r\n                            Try again\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"container\">\r\n                <h1>Cryptocurrency tracker</h1>\r\n                {mainView}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { currenciesSlice } from '../features/currencies/currenciesSlice';\r\nimport { trackerSlice } from '../features/tracker/trackerSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        currencies: currenciesSlice.reducer,\r\n        tracker: trackerSlice.reducer,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}